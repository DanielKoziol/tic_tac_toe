class Game
attr_accessor :board_state, :free_spaces, :curr_player, :winner, :move,
PLAYER1 = "O"
PLAYER2 = "X"
WINNING_LINES = [[1,2,3],[4,5,6],[7,8,9],[1,4,7],[2,5,8],[3,6,9],[1,5,9],[3,5,7]] 
BOARD_RANGE = (1..9)

def display_board
line = "-----------"
" #{board_state[1] || " "} | #{board_state[2] || " "} | #{board_state[3] || " "}
#{line}
 #{board_state[4] || " "} | #{board_state[5] || " "} | #{board_state[6] || " "}
#{line}
 #{board_state[7] || " "} | #{board_state[8] || " "} | #{board_state[9] || " "} \n"
end

def initialize
  @move = 0
  @winner = ""
  @curr_player = PLAYER1
  @free_spaces = 10
  @board_state = Array.new(10)
  print display_board
end

def count_nils
    board_state.reduce(0) do |sum, number|
    number == nil ? sum += 1 : sum += 0
    sum
    end
end

def free_spaces_count
  self.free_spaces = count_nils
end

def who_plays?
  self.curr_player = free_spaces_count.even? ? PLAYER1 : PLAYER2
end

def check_win
  WINNING_LINES.any? do |line|
  board_state[line[0]] == board_state[line[1]] && board_state[line[0]] == board_state[line[2]] ? self.winner = board_state[line[0]] : false
  end
end

def announce_winner
  p "#{winner} has won!"
end

def announce_draw
  p "Draw!" if winner.nil?
end

def dont_cheat
  p "don't cheat"
end

def invalid?
  !board_state[move].nil? && dont_cheat
end

def player_alias
  curr_player == "O" ? "Player1" : "Player2"
end

def get_move
  self.move = 0
  loop do
    print "pick a move - 1 to 9 \n#{player_alias} picks: "
    self.move = gets.chomp.to_i
    next if invalid?
    break move if BOARD_RANGE === move
  end
end

def add_move
  board_state[move] = curr_player
end

def round_play
  until free_spaces_count == 1
  who_plays?
  get_move
  add_move
  print display_board
  break announce_winner if check_win

  end
  announce_draw
end
end



gra = Game.new
gra.round_play